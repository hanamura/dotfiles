" references:
" - https://github.com/yuroyoro/dotfiles/blob/master/.vimrc.plugins_setting

" netrw
" =====
let g:netrw_liststyle=3 " always tree view
let g:netrw_altv=1 " open file in the right buffer with 'v'
let g:netrw_alto=1 " open file in the buffer below with 'o'

" neocomplete
" ===========
let g:neocomplete#enable_at_startup=1
let g:neocomplete#enable_ignore_case=1
let g:neocomplete#enable_smart_case=1
if !exists('g:neocomplete#keyword_patterns')
  let g:neocomplete#keyword_patterns={}
endif
let g:neocomplete#keyword_patterns._='\h\w*'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"

" neosnippet
" https://github.com/Shougo/neosnippet.vim
" ========================================
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"
if has('conceal')
  set conceallevel=2 concealcursor=i
endif
let g:neosnippet#snippets_directory='~/.snippets'

" markdown
" ========
let g:markdown_fenced_languages=[
      \ 'css',
      \ 'javascript',
      \ 'js=javascript',
      \ 'json=javascript',
      \ 'ruby',
      \ 'sass',
      \ 'xml',
      \ ]

" nerdtree
" ========
nmap <silent> <C-t> :NERDTreeToggle<CR>
vmap <silent> <C-t> <Esc>:NERDTreeToggle<CR>
omap <silent> <C-t> :NERDTreeToggle<CR>
cmap <silent> <C-t> <C-u>:NERDTreeToggle<CR>
let g:NERDTreeShowHidden=1
let g:NERDTreeShowBookmarks=1
let g:NERDTreeIgnore=[
      \ '\~$',
      \ '^.bundle$[[dir]]',
      \ '^.git$[[dir]]',
      \ '^.sass-cache$[[dir]]',
      \ '^.vagrant$[[dir]]',
      \ '^bower_components$[[dir]]',
      \ '^node_modules$[[dir]]',
      \ '^vendor$[[dir]]',
      \ '.lock$[[file]]',
      \ '^.DS_Store$[[file]]',
      \ '^.gitmodules$[[file]]',
      \ '^.local.*.vimrc$[[file]]',
      \ '^.local.vimrc$[[file]]',
      \ '^npm-debug.log$[[file]]',
      \ '^selenium-debug.log$[[file]]',
      \ '^package-lock.json$[[file]]',
      \ ]

" ctrlp
" =====
let g:ctrlp_map='<C-l>'
let g:ctrlp_cmd='CtrlP'
let g:ctrlp_working_path_mode='ra'
let g:ctrlp_extensions=[
      \ 'register',
      \ 'filetype',
      \ 'line',
      \ 'ghq',
      \ ]
let g:ctrlp_show_hidden=1
let g:ctrlp_prompt_mappings={
      \ 'PrtSelectMove("j")':   ['<c-n>', '<c-j>', '<down>'],
      \ 'PrtSelectMove("k")':   ['<c-p>', '<c-k>', '<up>'],
      \ 'PrtHistory(-1)':       [],
      \ 'PrtHistory(1)':        [],
      \ 'AcceptSelection("e")': ['<c-e>', '<cr>', '<2-LeftMouse>'],
      \ 'PrtCurEnd()':          [],
      \ 'PrtCurRight()':        ['<right>'],
      \ 'PrtExit()':            ['<esc>', '<c-c>', '<c-g>', '<c-l>'],
      \ }
let g:ctrlp_match_window='bottom,order:btt,min:1,max:30,results:30'
let g:ctrlp_custom_ignore={
      \ 'dir':  '\v[\/](\.(cache|git|hg|svn|sass-cache|jekyll)|node_modules|bower_components|wp-content)$',
      \ 'file': '\v\.(DS_Store|eot|gif|ico|lock|jar|jpeg|jpg|png|sqlite|swf|ttf|webp|woff|woff2|zip)$',
      \ }
let g:ctrlp_max_files=30000
let g:ctrlp_user_command=[
      \ '.git',
      \ 'cd %s && git ls-files | grep -v "\.\(eot\|gif\|ico\|lock\|jar\|jpeg\|jpg\|pdf\|png\|sqlite\|swf\|ttf\|webp\|woff\|woff2\|zip\)$"',
      \ 'find %s -type f',
      \ ]

" tabular
" =======
nnoremap <Leader>a= :Tabularize /^[^=]*\s\zs=\ze\s<CR>
vnoremap <Leader>a= :Tabularize /^[^=]*\s\zs=\ze\s<CR>
nnoremap <Leader>a: :Tabularize /^[^:]*:\zs/l0c1<CR>
vnoremap <Leader>a: :Tabularize /^[^:]*:\zs/l0c1<CR>
nnoremap <Leader>a> :Tabularize /^[^=]*\zs=><CR>
vnoremap <Leader>a> :Tabularize /^[^=]*\zs=><CR>

" airline
" =======
if !exists('g:airline_symbols')
  let g:airline_symbols={}
endif
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_symbols.branch='âŽ‡'
let g:airline_theme='badwolf'
let g:airline#extensions#tabline#enabled=1

" quickrun
" ========
let g:quickrun_config={}
let g:quickrun_config['coffee']={
      \ 'command': 'coffee',
      \ 'exec':    ['%c -cbp %s'],
      \ }

" smartword
" =========
map w <Plug>(smartword-w)
map b <Plug>(smartword-b)
map e <Plug>(smartword-e)
map ge <Plug>(smartword-ge)

" easymotion
" ==========
let g:EasyMotion_do_mapping=0
map s <Plug>(easymotion-s)
map S <Plug>(easymotion-s2)
map / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)
nnoremap g/ /
map f <Plug>(easymotion-bd-fl)
map t <Plug>(easymotion-bd-tl)
nnoremap <silent> gf f
nnoremap <silent> gt t

" vim-json
" ========
let g:vim_json_syntax_conceal=0

" emmet
" =====
let g:user_emmet_leader_key='<c-k>'

" ale
" ===

let g:ale_lint_on_text_changed='never'
let g:ale_linters={
      \ 'javascript': ['eslint'],
      \ 'php': ['php', 'phpcs'],
      \ 'scss': ['stylelint'],
      \ 'vue': [],
      \ }
